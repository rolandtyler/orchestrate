// Code generated by MockGen. DO NOT EDIT.
// Source: faucets.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multitenancy "github.com/consensys/orchestrate/pkg/toolkit/app/multitenancy"
	entities "github.com/consensys/orchestrate/pkg/types/entities"
	usecases "github.com/consensys/orchestrate/services/api/business/use-cases"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFaucetUseCases is a mock of FaucetUseCases interface
type MockFaucetUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockFaucetUseCasesMockRecorder
}

// MockFaucetUseCasesMockRecorder is the mock recorder for MockFaucetUseCases
type MockFaucetUseCasesMockRecorder struct {
	mock *MockFaucetUseCases
}

// NewMockFaucetUseCases creates a new mock instance
func NewMockFaucetUseCases(ctrl *gomock.Controller) *MockFaucetUseCases {
	mock := &MockFaucetUseCases{ctrl: ctrl}
	mock.recorder = &MockFaucetUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFaucetUseCases) EXPECT() *MockFaucetUseCasesMockRecorder {
	return m.recorder
}

// RegisterFaucet mocks base method
func (m *MockFaucetUseCases) RegisterFaucet() usecases.RegisterFaucetUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFaucet")
	ret0, _ := ret[0].(usecases.RegisterFaucetUseCase)
	return ret0
}

// RegisterFaucet indicates an expected call of RegisterFaucet
func (mr *MockFaucetUseCasesMockRecorder) RegisterFaucet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFaucet", reflect.TypeOf((*MockFaucetUseCases)(nil).RegisterFaucet))
}

// UpdateFaucet mocks base method
func (m *MockFaucetUseCases) UpdateFaucet() usecases.UpdateFaucetUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFaucet")
	ret0, _ := ret[0].(usecases.UpdateFaucetUseCase)
	return ret0
}

// UpdateFaucet indicates an expected call of UpdateFaucet
func (mr *MockFaucetUseCasesMockRecorder) UpdateFaucet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFaucet", reflect.TypeOf((*MockFaucetUseCases)(nil).UpdateFaucet))
}

// GetFaucet mocks base method
func (m *MockFaucetUseCases) GetFaucet() usecases.GetFaucetUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaucet")
	ret0, _ := ret[0].(usecases.GetFaucetUseCase)
	return ret0
}

// GetFaucet indicates an expected call of GetFaucet
func (mr *MockFaucetUseCasesMockRecorder) GetFaucet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaucet", reflect.TypeOf((*MockFaucetUseCases)(nil).GetFaucet))
}

// SearchFaucets mocks base method
func (m *MockFaucetUseCases) SearchFaucets() usecases.SearchFaucetsUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFaucets")
	ret0, _ := ret[0].(usecases.SearchFaucetsUseCase)
	return ret0
}

// SearchFaucets indicates an expected call of SearchFaucets
func (mr *MockFaucetUseCasesMockRecorder) SearchFaucets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFaucets", reflect.TypeOf((*MockFaucetUseCases)(nil).SearchFaucets))
}

// DeleteFaucet mocks base method
func (m *MockFaucetUseCases) DeleteFaucet() usecases.DeleteFaucetUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFaucet")
	ret0, _ := ret[0].(usecases.DeleteFaucetUseCase)
	return ret0
}

// DeleteFaucet indicates an expected call of DeleteFaucet
func (mr *MockFaucetUseCasesMockRecorder) DeleteFaucet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFaucet", reflect.TypeOf((*MockFaucetUseCases)(nil).DeleteFaucet))
}

// MockRegisterFaucetUseCase is a mock of RegisterFaucetUseCase interface
type MockRegisterFaucetUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterFaucetUseCaseMockRecorder
}

// MockRegisterFaucetUseCaseMockRecorder is the mock recorder for MockRegisterFaucetUseCase
type MockRegisterFaucetUseCaseMockRecorder struct {
	mock *MockRegisterFaucetUseCase
}

// NewMockRegisterFaucetUseCase creates a new mock instance
func NewMockRegisterFaucetUseCase(ctrl *gomock.Controller) *MockRegisterFaucetUseCase {
	mock := &MockRegisterFaucetUseCase{ctrl: ctrl}
	mock.recorder = &MockRegisterFaucetUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegisterFaucetUseCase) EXPECT() *MockRegisterFaucetUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockRegisterFaucetUseCase) Execute(ctx context.Context, faucet *entities.Faucet, userInfo *multitenancy.UserInfo) (*entities.Faucet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, faucet, userInfo)
	ret0, _ := ret[0].(*entities.Faucet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockRegisterFaucetUseCaseMockRecorder) Execute(ctx, faucet, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegisterFaucetUseCase)(nil).Execute), ctx, faucet, userInfo)
}

// MockUpdateFaucetUseCase is a mock of UpdateFaucetUseCase interface
type MockUpdateFaucetUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateFaucetUseCaseMockRecorder
}

// MockUpdateFaucetUseCaseMockRecorder is the mock recorder for MockUpdateFaucetUseCase
type MockUpdateFaucetUseCaseMockRecorder struct {
	mock *MockUpdateFaucetUseCase
}

// NewMockUpdateFaucetUseCase creates a new mock instance
func NewMockUpdateFaucetUseCase(ctrl *gomock.Controller) *MockUpdateFaucetUseCase {
	mock := &MockUpdateFaucetUseCase{ctrl: ctrl}
	mock.recorder = &MockUpdateFaucetUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateFaucetUseCase) EXPECT() *MockUpdateFaucetUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockUpdateFaucetUseCase) Execute(ctx context.Context, faucet *entities.Faucet, userInfo *multitenancy.UserInfo) (*entities.Faucet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, faucet, userInfo)
	ret0, _ := ret[0].(*entities.Faucet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockUpdateFaucetUseCaseMockRecorder) Execute(ctx, faucet, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateFaucetUseCase)(nil).Execute), ctx, faucet, userInfo)
}

// MockGetFaucetUseCase is a mock of GetFaucetUseCase interface
type MockGetFaucetUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetFaucetUseCaseMockRecorder
}

// MockGetFaucetUseCaseMockRecorder is the mock recorder for MockGetFaucetUseCase
type MockGetFaucetUseCaseMockRecorder struct {
	mock *MockGetFaucetUseCase
}

// NewMockGetFaucetUseCase creates a new mock instance
func NewMockGetFaucetUseCase(ctrl *gomock.Controller) *MockGetFaucetUseCase {
	mock := &MockGetFaucetUseCase{ctrl: ctrl}
	mock.recorder = &MockGetFaucetUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetFaucetUseCase) EXPECT() *MockGetFaucetUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockGetFaucetUseCase) Execute(ctx context.Context, uuid string, userInfo *multitenancy.UserInfo) (*entities.Faucet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, uuid, userInfo)
	ret0, _ := ret[0].(*entities.Faucet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockGetFaucetUseCaseMockRecorder) Execute(ctx, uuid, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetFaucetUseCase)(nil).Execute), ctx, uuid, userInfo)
}

// MockSearchFaucetsUseCase is a mock of SearchFaucetsUseCase interface
type MockSearchFaucetsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchFaucetsUseCaseMockRecorder
}

// MockSearchFaucetsUseCaseMockRecorder is the mock recorder for MockSearchFaucetsUseCase
type MockSearchFaucetsUseCaseMockRecorder struct {
	mock *MockSearchFaucetsUseCase
}

// NewMockSearchFaucetsUseCase creates a new mock instance
func NewMockSearchFaucetsUseCase(ctrl *gomock.Controller) *MockSearchFaucetsUseCase {
	mock := &MockSearchFaucetsUseCase{ctrl: ctrl}
	mock.recorder = &MockSearchFaucetsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchFaucetsUseCase) EXPECT() *MockSearchFaucetsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSearchFaucetsUseCase) Execute(ctx context.Context, filters *entities.FaucetFilters, userInfo *multitenancy.UserInfo) ([]*entities.Faucet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, filters, userInfo)
	ret0, _ := ret[0].([]*entities.Faucet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSearchFaucetsUseCaseMockRecorder) Execute(ctx, filters, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSearchFaucetsUseCase)(nil).Execute), ctx, filters, userInfo)
}

// MockDeleteFaucetUseCase is a mock of DeleteFaucetUseCase interface
type MockDeleteFaucetUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteFaucetUseCaseMockRecorder
}

// MockDeleteFaucetUseCaseMockRecorder is the mock recorder for MockDeleteFaucetUseCase
type MockDeleteFaucetUseCaseMockRecorder struct {
	mock *MockDeleteFaucetUseCase
}

// NewMockDeleteFaucetUseCase creates a new mock instance
func NewMockDeleteFaucetUseCase(ctrl *gomock.Controller) *MockDeleteFaucetUseCase {
	mock := &MockDeleteFaucetUseCase{ctrl: ctrl}
	mock.recorder = &MockDeleteFaucetUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleteFaucetUseCase) EXPECT() *MockDeleteFaucetUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockDeleteFaucetUseCase) Execute(ctx context.Context, uuid string, userInfo *multitenancy.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, uuid, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockDeleteFaucetUseCaseMockRecorder) Execute(ctx, uuid, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDeleteFaucetUseCase)(nil).Execute), ctx, uuid, userInfo)
}

// MockGetFaucetCandidateUseCase is a mock of GetFaucetCandidateUseCase interface
type MockGetFaucetCandidateUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetFaucetCandidateUseCaseMockRecorder
}

// MockGetFaucetCandidateUseCaseMockRecorder is the mock recorder for MockGetFaucetCandidateUseCase
type MockGetFaucetCandidateUseCaseMockRecorder struct {
	mock *MockGetFaucetCandidateUseCase
}

// NewMockGetFaucetCandidateUseCase creates a new mock instance
func NewMockGetFaucetCandidateUseCase(ctrl *gomock.Controller) *MockGetFaucetCandidateUseCase {
	mock := &MockGetFaucetCandidateUseCase{ctrl: ctrl}
	mock.recorder = &MockGetFaucetCandidateUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetFaucetCandidateUseCase) EXPECT() *MockGetFaucetCandidateUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockGetFaucetCandidateUseCase) Execute(ctx context.Context, account common.Address, chain *entities.Chain, userInfo *multitenancy.UserInfo) (*entities.Faucet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, account, chain, userInfo)
	ret0, _ := ret[0].(*entities.Faucet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockGetFaucetCandidateUseCaseMockRecorder) Execute(ctx, account, chain, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetFaucetCandidateUseCase)(nil).Execute), ctx, account, chain, userInfo)
}
